---
title: "F1 Tire Degradation Model"
author: "Matthew Kirk"
date: "`r Sys.Date()`"
format:
  html:
    code-fold: true
    code-tools: true

editor: visual
---

## Project Summary

Use race lap times to create predictive tire falloff models for each driver, to use live in future races.

Currently, this project is using the [Ergast F1 API](http://ergast.com/mrd/), and the [FastF1](https://docs.fastf1.dev/examples/index.html) Python Library.

------------------------------------------------------------------------

NOTES:

-   Use PyArrow to move FastF1 Python Data to R environment. Use reticulate() package to access standard Python/R objects.

**TODO:**

-   Get tire compound data for stints

-   Add function that flags safety car laps

-   Normalise lap time some how? First lap = 1 or something?

-   *Extension:* use this tire model to create simulated pit stop prediction models/visualisations (using D3.js).

## Packages

```{r}
#| label: load-packages
#| include: true
#| output: false
library(tidyverse)
library(lubridate)
library(jsonlite)
library(knitr)
```

## Import Data

Use the following code block to select which race to access.

```{r}
#| label: year-round-selection
YEAR = 2023
ROUND = 1
```

### Getting Lap Time Data

To get the lap time data for a given round, we need to access the /laps endpoint of the Ergast F1 API. The total responses from this API will be the number of drivers \* the number of laps each driver completes. Since the Ergast F1 API only returns a maximum of 1000 results per query, and each race can have over 1000 driver-laps (i.e. any race where all 20 drivers complete \>50 laps), we first need to find out how many total responses there are for a given round. Once we know that, we can calculate how many times we need to access the API in order to get the full set of race data lap times.

First, figuring out how many responses there are in the selected race, and then dividing by the api limit (1000) to calculate the number of iterations required:

```{r}
#| label: get-response-size-ergast


# Accesses API and gets value for total rows in full race
laps_total.url <- paste0("https://ergast.com/api/f1/",
                         YEAR, 
                         "/", 
                         ROUND, 
                         "/laps.json")

# Gets total number of rows in full race data
total_num <- as.numeric(fromJSON(laps_total.url)$MRData$total)

# Number of loop iterations needed to access full race data (api limit = 1000)
iterations_needed <- floor(total_num / 1000)
```

Now that we know how many times we need to access the API, we can acquire all the data using the map_df() function from the tidyverse library:

```{r}
#| label: get-full-race-data-ergast
#| cache: true


laptimes_raw.df <- map_df(0 : iterations_needed, function(i){
  Sys.sleep(0.5)        # API terms limit to 4 calls per second
  offset_x = i * 1000   # Generate offset based on i
  
  # URL to get data
  t_laptimes.url <- paste0("https://ergast.com/api/f1/", 
                            YEAR, 
                            "/",
                            ROUND, 
                            "/laps.json?limit=1000&offset=", 
                            offset_x)
  
  # get json from url, navigate json to lap times, then unpack into new df 
  t_lap.df <- unnest(fromJSON(t_laptimes.url)$MRData$RaceTable$Races$Laps[[1]],
                      cols = c(Timings))
  
  # Merge onto output dataframe
  return(t_lap.df)
})

head(laptimes_raw.df)
```

The 'number' column corresponds to 'lap', so lets rename it. We will also convert the data into correct types (numeric & datetime)

```{r}
#| label: clean-laptime-data

laptimes_clean.df <- laptimes_raw.df %>%
  rename(lap = number, laptime = time) %>%
  mutate(lap = as.numeric(lap), 
         position = as.numeric(position),
         laptime_lub = ms(laptime),
         laptime_seconds = as.numeric(laptime_lub))
head(laptimes_clean.df)

```

### Getting Constructor/Team Data

Ideally we want a variable that denotes the constructor that each driver is driving for. To do this, we will use the standings endpoint to connect the drivers and teams.

```{r}
#| label: driver-constructor-ergast


# create endpoint api string
driver_constructors.url <- paste0("http://ergast.com/api/f1/",
                                  YEAR,
                                  "/driverStandings.json")

# Access api, parse json, and then unnest into a df
driver_constructors_raw.df <- unnest(fromJSON(driver_constructors.url)$MRData$StandingsTable$StandingsLists$DriverStandings[[1]])

```

Now, select only relevant columns, and convert drivers racing numbers to numeric.

```{r}
#| label: driver-constructor-clean


# Remove unneeded info from driver_constructors and rename some variables
driver_constructors_clean.df <-  driver_constructors_raw.df%>%
  select(-position, -positionText, -points, -wins, -url, -url1) %>%
  rename(driverNationality = nationality, 
         constructorName = name, 
         constructorNationality = nationality1) %>%
  mutate(dateOfBirth = ymd(dateOfBirth),
         permanentNumber = as.numeric(permanentNumber))

head(driver_constructors_clean.df)
```

### Getting Pitstop Data

One of the key pieces of information we need is when a driver stops in the pits. This is important, both to split up the analysis for each stint, and to derive the age of the tires.

```{r}
#| label: get-pitsop-data


# Generating pitstop api url
pitstops.url <- paste0("http://ergast.com/api/f1/", 
                       YEAR, 
                       "/",
                       ROUND,
                       "/pitstops.json?limit=60")

# Creating dataframe from json object
pitstops_raw.df <- fromJSON(pitstops.url)$MRData$RaceTable$Races$PitStops[[1]]

head(pitstops_raw.df)
```

Convert numbers to numeric type, and drop unneeded columns.

```{r}
#| label: clean-pitsop-data


pitstops_clean.df <- pitstops_raw.df %>%
  mutate(lap_pitted = as.numeric(lap),
         stop_number = as.numeric(stop),
         pit_duration_secs = as.numeric(duration),
         time_pitted = hms(time)) %>%
  select(-time, -duration, -lap, -stop)

head(pitstops_clean.df)
```

Now create two new dataframes to denote whether a lap was an in-lap or out-lap, as these laps are slower than 'regular' laps.

```{r}
#| label: create-pit-lap-type


# Create temp df denoting pit in-laps
pitstops_in.df <- pitstops_clean.df %>%
  select(driverId, lap_pitted) %>%
  rename(pit_in_lap = lap_pitted) %>%
  mutate(is_in_lap = 1)


# Create temp df denoting pit out-laps
pitstops_out.df <- pitstops_in.df %>%
  mutate(pit_out_lap = pit_in_lap + 1) %>%
  rename(is_out_lap = is_in_lap) %>%
  select(-pit_in_lap) %>%
  relocate(is_out_lap, .after = pit_out_lap)

head(pitstops_in.df)
head(pitstops_out.df)
```

### Join Driver/Constructor, Pitstops tables to Main Laptime Table

First, join the teams to the main dataframe.

```{r}
#| label: join-teams-to-table

laptimes_constructor.df <- laptimes_clean.df %>%
  left_join(driver_constructors_clean.df, by="driverId")

head(laptimes_constructor.df)
```

Next, join the pitstop data

```{r}
#| label: join-pitstop-to-table

laptimes_constructor_pits.df <- laptimes_constructor.df %>%
  left_join(pitstops_in.df,
            by = join_by(driverId == driverId, lap == pit_in_lap)) %>%
  left_join(pitstops_out.df,
            by = join_by(driverId == driverId, lap == pit_out_lap))

head(laptimes_constructor_pits.df)
```

We need to replace the NA values in `is_in_lap` and `is_out_lap` with 0s.

```{r}
#| label: remove-pitstop-nas


laptimes_constructor_pits.df <- laptimes_constructor_pits.df %>%
  mutate(is_in_lap = ifelse(is.na(is_in_lap), 0, 1),
         is_out_lap = ifelse(is.na(is_out_lap), 0, 1))

head(laptimes_constructor_pits.df)
```

### Derive Dummy/Flag Variables (is_first_lap, prev_lap, safety_car, tire_age)

#### is_first_lap

The first lap of a race is significantly slower than the rest of the race, especially for cars who qualified further down the field. This could be a useful indicator.

```{r}
#| label: create_is_first_lap

laptimes_constructor_pits.df <- laptimes_constructor_pits.df %>%
  mutate(is_first_lap = ifelse(lap == 1, 1, 0))
```

### prev_lap

The previous lap time will probably be very predictive of subsequent laptimes. We will check the autocorrelation plots for the model to ensure this, but we can easily create the variable now

```{r}
#| label: get_prev_lap

laptimes_constructor_pits.df <- laptimes_constructor_pits.df %>%
  arrange(driverId, lap) %>%
  mutate(prev_laptime_seconds = ifelse(is_first_lap != 1, 
                                       lag(laptime_seconds), 
                                       NA)) %>%
  arrange(lap, position)
```

### safety_car

**TODO:**

Safety cars occur when there's been an incident on track (crashed or broken down car, for example). These lap times are significantly slower than normal 'racing' laps.

Therefore we need to flag if a lap is under a safety car.

If laptimes are more 10% slower than median lap times (for a driver?), then flag them as safety car laps

NOTE: This might need to be re-worked as it may not perfectly flag yellow flags

```{r}
#| label: safety_car


# if laptime > median(laptimes) AND not in/out lap ()
sc_cutoff <- median(laptimes_constructor_pits.df$laptime_seconds) * 1.1
```

### tire_age

At the moment, I am assuming all cars are starting on new tires, as there's no way for me to track if a specific set of tires has been used earlier in the weekend.

This will break if someone pits and doesnt change tires (extremely unlikely that this happens)

```{r}
#| label: tire_age


tire_age.df <- laptimes_constructor_pits.df %>%
  arrange(driverId, lap) %>%
  mutate(tire_age = 1) %>%
  group_by(driverId) %>%
  mutate(stint = cumsum(is_out_lap)) %>%
  ungroup() %>%
  group_by(driverId, stint) %>%
  mutate(tire_age = cumsum(tire_age)-1) %>%
  ungroup() %>%
  arrange(lap, position) %>%
  relocate(tire_age, .after = lap)

head(tire_age.df)
```

## Analysis

### Test Chart

Lap times:

```{r}
#| label: test-chart1
redbull_pits <- laptimes_constructor_pits.df %>%
  filter(constructorId == "red_bull", is_in_lap == 1)

redbull_times.df <- laptimes_constructor_pits.df %>%
  filter(constructorId == "red_bull")

ggplot() +
  geom_point(aes(x=lap, y = laptime_seconds, group = driverId),
             data=laptimes_constructor_pits.df,
             alpha = 0.05) +
  geom_line(aes(x=lap, y = laptime_seconds, group = driverId, colour = driverId),
             data=redbull_times.df,
             alpha = 0.8, size = 1) +
  geom_vline(aes(xintercept = lap, color = driverId), data = redbull_pits, lty = 2, alpha = 0.4, size = 1)

```

```{r}
#| label: test-chart2
tire_age.df %>%
  filter(constructorId == "red_bull",
         laptime_seconds < sc_cutoff,
         is_in_lap == 0) %>%
  ggplot(aes(x = tire_age, y = laptime_seconds, group = driverId, color = driverId)) +
  geom_point(alpha = 0.8, size = 1) +
  # geom_line(stat = "smooth", se = F, size = 1, alpha = 0.4) +
  facet_wrap(vars(stint), scales = "free_x") + 
  theme_minimal()
```
